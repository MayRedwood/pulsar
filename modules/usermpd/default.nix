{
  config,
  lib,
  pkgs,
  ...
}:
with lib;

let
  cfg = config.services.usermpd;
  mpdConf = pkgs.writeText "mpd.conf" ''
    # This file was automatically generated by NixOS. Edit mpd's configuration
    # via NixOS' configuration.nix, as this file will be rewritten upon mpd's
    # restart.

    music_directory     "${cfg.musicDirectory}"
    playlist_directory  "${cfg.playlistDirectory}"
    ${lib.optionalString (cfg.dbFile != null) ''
      db_file             "${cfg.dbFile}"
    ''}
    state_file          "${cfg.dataDir}/state"
    sticker_file        "${cfg.dataDir}/sticker.sql"

    ${optionalString (
      cfg.network.listenAddress != "any"
    ) ''bind_to_address "${cfg.network.listenAddress}"''}
    ${optionalString (cfg.network.port != 6600) ''port "${toString cfg.network.port}"''}
    ${optionalString cfg.fluidsynth ''
      decoder {
              plugin "fluidsynth"
              soundfont "${pkgs.soundfont-fluid}/share/soundfonts/FluidR3_GM2-2.sf2"
      }
    ''}

    ${cfg.extraConfig}
  '';
in

{
  ###### interface
  options = {
    services.usermpd = {
      enable = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Whether to enable MPD, the music player daemon.
        '';
      };
      startWhenNeeded = mkOption {
        type = types.bool;
        default = false;
        description = ''
          If set, {command}`mpd` is socket-activated; that
          is, instead of having it permanently running as a daemon,
          systemd will start it on the first incoming connection.
        '';
      };
      musicDirectory = mkOption {
        type = with types; either path (strMatching "(http|https|nfs|smb)://.+");
        default = "${cfg.dataDir}/music";
        defaultText = literalExpression ''"''${dataDir}/music"'';
        description = ''
          The directory or NFS/SMB network share where MPD reads music from. If left
          as the default value this directory will automatically be created before
          the MPD server starts, otherwise the sysadmin is responsible for ensuring
          the directory exists with appropriate ownership and permissions.
        '';
      };
      playlistDirectory = mkOption {
        type = types.path;
        default = "${cfg.dataDir}/playlists";
        defaultText = literalExpression ''"''${dataDir}/playlists"'';
        description = ''
          The directory where MPD stores playlists. If left as the default value
          this directory will automatically be created before the MPD server starts,
          otherwise the sysadmin is responsible for ensuring the directory exists
          with appropriate ownership and permissions.
        '';
      };
      extraConfig = mkOption {
        type = types.lines;
        default = "";
        description = ''
          Extra directives added to to the end of MPD's configuration file,
          mpd.conf. Basic configuration like file location and uid/gid
          is added automatically to the beginning of the file. For available
          options see {manpage}`mpd.conf(5)`.
        '';
      };
      dataDir = mkOption {
        type = types.path;
        default = null;
        description = ''
          The directory where MPD stores its state, tag cache, playlists etc. If
          left as the default value this directory will automatically be created
          before the MPD server starts, otherwise the sysadmin is responsible for
          ensuring the directory exists with appropriate ownership and permissions.
        '';
      };

      network = {
        listenAddress = mkOption {
          type = types.str;
          default = "127.0.0.1";
          example = "any";
          description = ''
            The address for the daemon to listen on.
            Use `any` to listen on all addresses.
          '';
        };
        port = mkOption {
          type = types.port;
          default = 6600;
          description = ''
            This setting is the TCP port that is desired for the daemon to get assigned
            to.
          '';
        };
      };

      dbFile = mkOption {
        type = types.nullOr types.str;
        default = "${cfg.dataDir}/tag_cache";
        defaultText = literalExpression ''"''${dataDir}/tag_cache"'';
        description = ''
          The path to MPD's database. If set to `null` the
          parameter is omitted from the configuration.
        '';
      };
      fluidsynth = mkOption {
        type = types.bool;
        default = false;
        description = ''
          If set, add fluidsynth soundfont and configure the plugin.
        '';
      };
      mpd-mpris = mkOption {
        type = types.bool;
        default = false;
        description = ''
          If set, add and configure mpd-mpris.
        '';
      };
    };
  };

  ###### implementation
  config = mkIf cfg.enable {
    # install mpd units
    systemd.packages = [ pkgs.mpd ];

    systemd.user.sockets.mpd = mkIf cfg.startWhenNeeded {
      wantedBy = [ "sockets.target" ];
      listenStreams = [
        "" # Note: this is needed to override the upstream unit
        (
          if pkgs.lib.hasPrefix "/" cfg.network.listenAddress then
            cfg.network.listenAddress
          else
            "${
              optionalString (cfg.network.listenAddress != "any") "${cfg.network.listenAddress}:"
            }${toString cfg.network.port}"
        )
      ];
    };

    systemd.user.services.mpd = {
      description = "Music Player Daemon";
      wantedBy = optional (!cfg.startWhenNeeded) "default.target";
      after = [
        "network.target"
        "sound.target"
      ];
      serviceConfig = {
        # Note: the first "" overrides the ExecStart from the upstream unit
        ExecStart = [
          ""
          "${pkgs.mpd}/bin/mpd --systemd ${mpdConf}"
        ];
        Type = "notify";
        ExecStartPre = ''${pkgs.bash}/bin/bash -c "${pkgs.coreutils}/bin/mkdir -p '${cfg.dataDir}' '${cfg.playlistDirectory}'"'';
      };
    };

    systemd.user.services.mpd-mpris = mkIf cfg.mpd-mpris {
      description = "mpd-mpris: An implementation of the MPRIS protocol for MPD";
      wantedBy = optional (!cfg.startWhenNeeded) "default.target";
      requires = [ "mpd.service" ];
      after = [ "mpd.service" ];
      serviceConfig = {
        Type = "simple";
        Restart = "on-failure";
        RestartSec = "5s";
        ExecStart = [
          ""
          "${pkgs.mpd-mpris}/bin/mpd-mpris --no-instance"
        ];
      };
    };
  };
}
